schema {
 query: QueryType
}

type BreedCaseCount {
  breed: String
  cases: Int
}

type CaseDetail {
  patient_id: String
  breed: String
  patient_age_at_enrollment: String
  sex: String
  disease_term: String
  stage_of_disease: String
}

type StudyCodeCaseCount {
  study_code: String
  cases: Int
}

type DiagnosisCaseCount {
  diagnosis: String
  cases: Int
}

type GenderCaseCount {
  gender: String
  cases: Int
}

type QueryType {
  numberOfStudies: Int @cypher(statement: "MATCH (n:study) RETURN  count (n)")
  numberOfCases: Int @cypher(statement: "MATCH (n:case) RETURN  count (n)")
  numberOfSamples:Int @cypher(statement: "MATCH (n:sample) RETURN  count (n)")
  numberOfFiles: Int @cypher(statement: "MATCH (n:file) RETURN  count (n)")
  caseCountByStudyCode: [StudyCodeCaseCount] @cypher(statement: "MATCH (s:study)<-[:member_of]-(:study_arm)<-[member_of]-(:cohort)<-[:member_of]-(c:case) RETURN s.submitter_id AS study_code, count(c) AS cases ORDER BY s.submitter_id")
  caseCountByDiagnosis: [DiagnosisCaseCount] @cypher(statement: "MATCH (d:diagnosis)-[:of_case]->(c:case) RETURN d.disease_term AS diagnosis, count(c) AS cases ORDER BY d.disease_term")
  caseCountByGender: [GenderCaseCount] @cypher(statement: "MATCH (d:demographic)-[:of_case]->(c:case) RETURN d.sex AS gender, count(c) AS cases ORDER BY d.sex")
  caseCountByBreed: [BreedCaseCount] @cypher(statement: "MATCH (c:case)<-[:of_case]-(d:demographic) RETURN d.breed AS breed, count(c) AS cases")
  casesByStudyAndBreeds(study_name: String, breeds: [String], disease_terms: [String]): [CaseDetail] @cypher(statement: "MATCH (s:study)<-[:member_of]-(a:study_arm)<-[:member_of]-(c:cohort)<-[:member_of]-(case:case)<-[:of_case]-(d:demographic), (case)<-[:of_case]-(diag:diagnosis) WHERE s.clinical_study_name = $study_name and d.breed IN $breeds and diag.disease_term IN $disease_terms RETURN case.patient_id AS patient_id, d.breed AS breed, d.patient_age_at_enrollment AS patient_age_at_enrollment, d.sex AS sex, diag.disease_term AS disease_term, diag.stage_of_disease AS stage_of_disease")
#  numberOfBiospecimenAliguots: Int
}