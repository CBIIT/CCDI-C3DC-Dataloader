Indices:
  - index_name: c3dc_static_pages
    type: about_file
    mapping:
      page:
        type: search_as_you_type
      title:
        type: search_as_you_type
      primaryContentImage:
        type: text
      content:
        type: object

  - index_name: home_stats
    type: neo4j
    mapping:
      num_diseases:
        type: integer
      num_participants:
        type: integer
      num_reference_files:
        type: integer
      num_studies:
        type: integer
      num_survivals:
        type: integer
    cypher_query: >
      MATCH (p:participant)-[:of_participant]->(stu:study)
        OPTIONAL MATCH (stu)<-[:of_reference_file]-(rf:reference_file)
        OPTIONAL MATCH (p)<-[:of_survival]-(sur:survival)
        OPTIONAL MATCH (p)<-[:of_diagnosis]-(d:diagnosis)
      RETURN
        COUNT(DISTINCT d.diagnosis) AS num_diseases,
        COUNT(DISTINCT p) AS num_participants,
        COUNT(DISTINCT rf) AS num_reference_files,
        COUNT(DISTINCT stu) AS num_studies,
        COUNT(DISTINCT sur) AS num_survivals;

  - index_name: diagnoses
    type: neo4j
    mapping:
      diagnosis_pk: # Primary key
        type: keyword
      age_at_diagnosis:
        type: integer
      anatomic_site:
        type: keyword
      diagnosis_basis:
        type: keyword
      diagnosis:
        type: keyword
      diagnosis_classification_system:
        type: keyword
      diagnosis_comment:
        type: keyword
      diagnosis_id:
        type: keyword
      disease_phase:
        type: keyword
      toronto_childhood_cancer_staging:
        type: keyword
      tumor_classification:
        type: keyword
      tumor_grade:
        type: keyword
      tumor_stage_clinical_m:
        type: keyword
      tumor_stage_clinical_n:
        type: keyword
      tumor_stage_clinical_t:
        type: keyword
      # Participant fields
      participant_pk:
        type: keyword
      ethnicity:
        type: keyword
      ethnicity_str:
        type: keyword
      participant_id:
        type: keyword
      race:
        type: keyword
      race_str:
        type: keyword
      sex_at_birth:
        type: keyword
      # Samples
      # samples:
      #   type: nested
      #   properties:
      #     anatomic_site:
      #       type: keyword
      #     participant_age_at_collection:
      #       type: integer
      #     sample_tumor_status:
      #       type: keyword
      #     tumor_classification:
      #       type: keyword
      # Studies
      phs_accession:
        type: keyword
      study_acronym:
        type: keyword
      study_id:
        type: keyword
      study_short_title:
        type: keyword
      # Survivals
      survivals:
        type: nested
        properties:
          age_at_last_known_survival_status:
            type: integer
          first_event:
            type: keyword
          last_known_survival_status:
            type: keyword
    cypher_query: >
      MATCH (d:diagnosis)-[:of_diagnosis]->(p:participant),
        (stu:study)<-[:of_participant]-(p)
      OPTIONAL MATCH (sur:survival)-[:of_survival]->(p)
      RETURN
        d.diagnosis_id AS diagnosis_pk,
        d.age_at_diagnosis as age_at_diagnosis,
        d.anatomic_site as anatomic_site,
        d.diagnosis_basis as diagnosis_basis,
        d.diagnosis as diagnosis,
        d.diagnosis_classification_system as diagnosis_classification_system,
        d.diagnosis_comment as diagnosis_comment,
        apoc.text.split(d.diagnosis_id, '::')[0] as diagnosis_id,
        d.disease_phase as disease_phase,
        d.toronto_childhood_cancer_staging as toronto_childhood_cancer_staging,
        d.tumor_classification as tumor_classification,
        d.tumor_grade as tumor_grade,
        d.tumor_stage_clinical_m as tumor_stage_clinical_m,
        d.tumor_stage_clinical_n as tumor_stage_clinical_n,
        d.tumor_stage_clinical_t as tumor_stage_clinical_t,
        p.participant_id AS participant_pk,
        apoc.text.split(p.ethnicity, ';') as ethnicity,
        p.ethnicity as ethnicity_str,
        apoc.text.split(p.participant_id, '::')[0] as participant_id,
        apoc.text.split(p.race, ';') as race,
        p.race as race_str,
        p.sex_at_birth as sex_at_birth,
        stu.phs_accession AS phs_accession,
        stu.study_acronym AS study_acronym,
        stu.study_id AS study_id,
        stu.study_short_title AS study_short_title,
        COLLECT(DISTINCT {
          age_at_last_known_survival_status: sur.age_at_last_known_survival_status,
          // first_event isn't required, so we must catch '' and turn them into 'Not Reported'
          first_event: CASE sur.first_event WHEN '' THEN 'Not Reported' ELSE sur.first_event END,
          last_known_survival_status: sur.last_known_survival_status
        }) AS survivals;

  - index_name: participants
    type: neo4j
    mapping:
      participant_pk: # Primary key
        type: keyword
      ethnicity:
        type: keyword
      ethnicity_str:
        type: keyword
      participant_id:
        type: keyword
        normalizer: lowercase
      race:
        type: keyword
      race_str:
        type: keyword
      sex_at_birth:
        type: keyword
      # Diagnoses
      diagnoses:
        type: nested
        properties:
          age_at_diagnosis:
            type: integer
          anatomic_site:
            type: keyword
          diagnosis_basis:
            type: keyword
          diagnosis:
            type: keyword
          diagnosis_classification_system:
            type: keyword
          disease_phase:
            type: keyword
      # Studies
      study_id:
        type: keyword
      phs_accession:
        type: keyword
      study_acronym:
        type: keyword
      study_short_title:
        type: keyword
      # Survivals
      survivals:
        type: nested
        properties:
          age_at_last_known_survival_status:
            type: integer
          first_event:
            type: keyword
          last_known_survival_status:
            type: keyword
    # Make sure Neo4j has APOC plugin installed
    cypher_query: >
      MATCH (p:participant)-[:of_participant]->(stu:study)
      OPTIONAL MATCH (sur:survival)-[:of_survival]->(p)
      OPTIONAL MATCH (d:diagnosis)-[:of_diagnosis]->(p)
      RETURN
        p.participant_id AS participant_pk,
        apoc.text.split(p.ethnicity, ';') AS ethnicity,
        p.ethnicity AS ethnicity_str,
        apoc.text.split(p.participant_id, '::')[0] as participant_id,
        apoc.text.split(p.race, ';') AS race,
        p.race AS race_str,
        p.sex_at_birth AS sex_at_birth,
        stu.study_id AS study_id,
        stu.phs_accession AS phs_accession,
        stu.study_acronym AS study_acronym,
        stu.study_short_title AS study_short_title,
        COLLECT({
          age_at_last_known_survival_status: sur.age_at_last_known_survival_status,
          // first_event isn't required, so we must catch '' and turn them into 'Not Reported'
          first_event: CASE sur.first_event WHEN '' THEN 'Not Reported' ELSE sur.first_event END,
          last_known_survival_status: sur.last_known_survival_status
        }) AS survivals,
        COLLECT({
          age_at_diagnosis: d.age_at_diagnosis,
          anatomic_site: d.anatomic_site,
          diagnosis_basis: d.diagnosis_basis,
          diagnosis: d.diagnosis,
          diagnosis_classification_system: d.diagnosis_classification_system,
          disease_phase: d.disease_phase
        }) AS diagnoses;

  - index_name: reference_files
    type: neo4j
    mapping:
      reference_file_pk: # Primary key
        type: keyword
      dcf_indexd_guid:
        type: keyword
      file_category:
        type: keyword
      file_description:
        type: keyword
      file_name:
        type: keyword
      file_size:
        type: long
      file_type:
        type: keyword
      md5sum:
        type: keyword
      reference_file_id:
        type: keyword
      reference_file_url:
        type: keyword
    cypher_query: >
      MATCH (r:reference_file)
      RETURN
        r.reference_file_id AS reference_file_pk,
        r.dcf_indexd_guid as dcf_indexd_guid,
        r.file_category as file_category,
        r.file_description as file_description,
        r.file_name as file_name,
        r.file_size as file_size,
        r.file_type as file_type,
        r.md5sum as md5sum,
        apoc.text.split(r.reference_file_id, '::')[0] as reference_file_id,
        r.reference_file_url as reference_file_url;

  - index_name: studies
    type: neo4j
    mapping:
      study_pk: # Primary key
        type: keyword
      acl:
        type: keyword
      consent:
        type: keyword
      consent_number:
        type: integer
      external_url:
        type: keyword
      phs_accession:
        type: keyword
      study_acronym:
        type: keyword
      study_description:
        type: keyword
      study_id:
        type: keyword
      study_short_title:
        type: keyword
      num_participants:
        type: integer
      num_diseases:
        type: integer
      num_anatomic_sites:
        type: integer
      num_survivals:
        type: integer
    cypher_query: >
      MATCH (stu:study)<-[:of_participant]-(p:participant)
      OPTIONAL MATCH (d:diagnosis)-[:of_diagnosis]->(p)
      OPTIONAL MATCH (sur:survival)-[:of_survival]->(p)
      RETURN
        stu.study_id AS study_pk,
        stu.acl AS acl,
        stu.consent AS consent,
        stu.consent_number AS consent_number,
        stu.external_url AS external_url,
        stu.phs_accession AS phs_accession,
        stu.study_acronym AS study_acronym,
        stu.study_description AS study_description,
        stu.study_id AS study_id,
        stu.study_short_title AS study_short_title,
        COUNT(DISTINCT p) AS num_participants,
        COUNT(DISTINCT d.diagnosis) AS num_diseases,
        COUNT(DISTINCT d.anatomic_site) AS num_anatomic_sites,
        COUNT(DISTINCT sur) AS num_survivals;

  - index_name: survivals
    type: neo4j
    mapping:
      survival_pk: # Primary key
        type: keyword
      age_at_event_free_survival_status:
        type: integer
      age_at_last_known_survival_status:
        type: integer
      event_free_survival_status:
        type: keyword
      first_event:
        type: keyword
      last_known_survival_status:
        type: keyword
      survival_id:
        type: keyword
      # Diagnoses
      diagnoses:
        type: nested
        properties:
          age_at_diagnosis:
            type: integer
          anatomic_site:
            type: keyword
          diagnosis_basis:
            type: keyword
          diagnosis:
            type: keyword
          diagnosis_classification_system:
            type: keyword
          disease_phase:
            type: keyword
      # Participant fields
      participant_pk:
        type: keyword
      ethnicity:
        type: keyword
      participant_id:
        type: keyword
      race:
        type: keyword
      sex_at_birth:
        type: keyword
      # Studies
      phs_accession:
        type: keyword
      study_acronym:
        type: keyword
      study_id:
        type: keyword
      study_short_title:
        type: keyword
    cypher_query: >
      MATCH (sur:survival)-[:of_survival]->(p:participant)-[:of_participant]->(stu:study)
      OPTIONAL MATCH (d:diagnosis)-[:of_diagnosis]->(p)
      RETURN
        sur.survival_id AS survival_pk,
        sur.age_at_event_free_survival_status AS age_at_event_free_survival_status,
        sur.age_at_last_known_survival_status AS age_at_last_known_survival_status,
        sur.event_free_survival_status AS event_free_survival_status,
        // first_event isn't required, so we must catch '' and turn them into 'Not Reported'
        (CASE sur.first_event WHEN '' THEN 'Not Reported' ELSE sur.first_event END) AS first_event,
        sur.last_known_survival_status AS last_known_survival_status,
        apoc.text.split(sur.survival_id, '::')[0] AS survival_id,
        apoc.text.split(p.ethnicity, ';') AS ethnicity,
        p.participant_id AS participant_pk,
        p.ethnicity AS ethnicity_str,
        apoc.text.split(p.participant_id, '::')[0] AS participant_id,
        apoc.text.split(p.race, ';') AS race,
        p.race as race_str,
        p.sex_at_birth AS sex_at_birth,
        stu.phs_accession AS phs_accession,
        stu.study_acronym AS study_acronym,
        stu.study_id AS study_id,
        stu.study_short_title AS study_short_title,
        COLLECT(DISTINCT {
          age_at_diagnosis: d.age_at_diagnosis,
          anatomic_site: d.anatomic_site,
          diagnosis_basis: d.diagnosis_basis,
          diagnosis: d.diagnosis,
          diagnosis_classification_system: d.diagnosis_classification_system,
          disease_phase: d.disease_phase
        }) AS diagnoses;

  - index_name: treatments
    type: neo4j
    mapping:
      # Treatment fields
      treatment_pk: # Primary key
        type: keyword
      age_at_treatment_end:
        type: integer
      age_at_treatment_start:
        type: integer
      treatment_agent:
        type: keyword
      treatment_id:
        type: keyword
      treatment_type:
        type: keyword
      # Participant fields
      participant_pk:
        type: keyword
      ethnicity:
        type: keyword
      ethnicity_str:
        type: keyword
      participant_id:
        type: keyword
      race:
        type: keyword
      race_str:
        type: keyword
      sex_at_birth:
        type: keyword
      # Study fields
      dbgap_accession:
        type: keyword
      study_acronym:
        type: keyword
      study_id:
        type: keyword
      study_name:
        type: keyword
      # Diagnosis records
      diagnoses:
        type: nested
        properties:
          age_at_diagnosis:
            type: integer
          anatomic_site:
            type: keyword
          diagnosis_basis:
            type: keyword
          diagnosis:
            type: keyword
          diagnosis_classification_system:
            type: keyword
          diagnosis_comment:
            type: keyword
          diagnosis_id:
            type: keyword
          disease_phase:
            type: keyword
          toronto_childhood_cancer_staging:
            type: keyword
          tumor_classification:
            type: keyword
          tumor_grade:
            type: keyword
          tumor_stage_clinical_m:
            type: keyword
          tumor_stage_clinical_n:
            type: keyword
          tumor_stage_clinical_t:
            type: keyword
      # Survival records
      survivals:
        type: nested
        properties:
          age_at_last_known_survival_status:
            type: integer
          first_event:
            type: keyword
          last_known_survival_status:
            type: keyword
      # Treatment Response records
      treatment_responses:
        type: nested
        properties:
          age_at_response:
            type: integer
          response:
            type: keyword
          response_category:
            type: keyword
          response_system:
            type: keyword
          treatment_response_id:
            type: keyword
    cypher_query: >
      MATCH (t:treatment)-[:of_treatment]->(p:participant),
        (stu:study)<-[:of_participant]-(p)
      OPTIONAL MATCH (d:diagnosis)-[:of_diagnosis]->(p)
      OPTIONAL MATCH (sur:survival)-[:of_survival]->(p)
      OPTIONAL MATCH (tresp:treatment_response)-[:of_treatment_response]->(p)
      RETURN
        // Treatment fields
        t.id AS treatment_pk,
        t.age_at_treatment_end AS age_at_treatment_end,
        t.age_at_treatment_start AS age_at_treatment_start,
        t.treatment_agent AS treatment_agent,
        t.treatment_id AS treatment_id,
        t.treatment_type AS treatment_type,

        // Participant fields
        p.id AS participant_pk,
        apoc.text.split(p.ethnicity, ';') AS ethnicity,
        p.ethnicity AS ethnicity_str,
        p.participant_id AS participant_id,
        apoc.text.split(p.race, ';') AS race,
        p.race AS race_str,
        p.sex_at_birth AS sex_at_birth,

        // Study fields
        stu.dbgap_accession AS dbgap_accession,
        stu.study_acronym AS study_acronym,
        stu.study_id AS study_id,
        stu.study_name AS study_short_name,

        // Diagnosis records
        COLLECT(DISTINCT {
          age_at_diagnosis: d.age_at_diagnosis,
          anatomic_site: d.anatomic_site,
          diagnosis_basis: d.diagnosis_basis,
          diagnosis: d.diagnosis,
          diagnosis_classification_system: d.diagnosis_classification_system,
          diagnosis_comment: d.diagnosis_comment,
          diagnosis_id: d.diagnosis_id,
          disease_phase: d.disease_phase,
          toronto_childhood_cancer_staging: d.toronto_childhood_cancer_staging,
          tumor_classification: d.tumor_classification,
          tumor_grade: d.tumor_grade,
          tumor_stage_clinical_m: d.tumor_stage_clinical_m,
          tumor_stage_clinical_n: d.tumor_stage_clinical_n,
          tumor_stage_clinical_t: d.tumor_stage_clinical_t
        }) AS diagnoses,

        // Survival records
        COLLECT(DISTINCT {
          age_at_last_known_survival_status: sur.age_at_last_known_survival_status,
          first_event: sur.first_event,
          last_known_survival_status: sur.last_known_survival_status
        }) AS survivals,

        // Treatment Response records
        COLLECT(DISTINCT {
          age_at_response: tresp.age_at_response,
          response: tresp.response,
          response_category: tresp.response_category,
          response_system: tresp.response_system,
          treatment_response_id: tresp.treatment_response_id
        }) AS treatment_responses;

  - index_name: treatment_responses
    type: neo4j
    mapping:
      # Treatment Response fields
      treatment_response_pk: # Primary key
        type: keyword
      age_at_response:
        type: integer
      response:
        type: keyword
      response_category:
        type: keyword
      response_system:
        type: keyword
      treatment_response_id:
        type: keyword
      # Participant fields
      participant_pk:
        type: keyword
      ethnicity:
        type: keyword
      ethnicity_str:
        type: keyword
      participant_id:
        type: keyword
      race:
        type: keyword
      race_str:
        type: keyword
      sex_at_birth:
        type: keyword
      # Study fields
      dbgap_accession:
        type: keyword
      study_acronym:
        type: keyword
      study_id:
        type: keyword
      study_name:
        type: keyword
      # Diagnosis records
      diagnoses:
        type: nested
        properties:
          age_at_diagnosis:
            type: integer
          anatomic_site:
            type: keyword
          diagnosis_basis:
            type: keyword
          diagnosis:
            type: keyword
          diagnosis_classification_system:
            type: keyword
          diagnosis_comment:
            type: keyword
          diagnosis_id:
            type: keyword
          disease_phase:
            type: keyword
          toronto_childhood_cancer_staging:
            type: keyword
          tumor_classification:
            type: keyword
          tumor_grade:
            type: keyword
          tumor_stage_clinical_m:
            type: keyword
          tumor_stage_clinical_n:
            type: keyword
          tumor_stage_clinical_t:
            type: keyword
      # Survival records
      survivals:
        type: nested
        properties:
          age_at_last_known_survival_status:
            type: integer
          first_event:
            type: keyword
          last_known_survival_status:
            type: keyword
      # Treatment records
      treatments:
        type: nested
        properties:
          age_at_treatment_end:
            type: integer
          age_at_treatment_start:
            type: integer
          treatment_agent:
            type: keyword
          treatment_id:
            type: keyword
          treatment_type:
            type: keyword
    cypher_query: >
      MATCH (tresp:treatment_response)-[:of_treatment_response]->(p:participant),
        (stu:study)<-[:of_participant]-(p)
      OPTIONAL MATCH (d:diagnosis)-[:of_diagnosis]->(p)
      OPTIONAL MATCH (sur:survival)-[:of_survival]->(p)
      OPTIONAL MATCH (t:treatment)-[:of_treatment]->(p)
      RETURN
        // Treatment Response fields
        tresp.id AS treatment_response_pk,
        tresp.age_at_response AS age_at_response,
        tresp.response AS response,
        tresp.response_category AS response_category,
        tresp.response_system AS response_system,
        tresp.treatment_response_id AS treatment_response_id,

        // Participant fields
        p.id AS participant_pk,
        apoc.text.split(p.ethnicity, ';') AS ethnicity,
        p.ethnicity AS ethnicity_str,
        p.participant_id AS participant_id,
        apoc.text.split(p.race, ';') AS race,
        p.race AS race_str,
        p.sex_at_birth AS sex_at_birth,

        // Study fields
        stu.dbgap_accession AS dbgap_accession,
        stu.study_acronym AS study_acronym,
        stu.study_id AS study_id,
        stu.study_name AS study_short_name,

        // Diagnosis records
        COLLECT(DISTINCT {
          age_at_diagnosis: d.age_at_diagnosis,
          anatomic_site: d.anatomic_site,
          diagnosis_basis: d.diagnosis_basis,
          diagnosis: d.diagnosis,
          diagnosis_classification_system: d.diagnosis_classification_system,
          diagnosis_comment: d.diagnosis_comment,
          diagnosis_id: apoc.text.split(d.diagnosis_id, '::')[0],
          disease_phase: d.disease_phase,
          toronto_childhood_cancer_staging: d.toronto_childhood_cancer_staging,
          tumor_classification: d.tumor_classification,
          tumor_grade: d.tumor_grade,
          tumor_stage_clinical_m: d.tumor_stage_clinical_m,
          tumor_stage_clinical_n: d.tumor_stage_clinical_n,
          tumor_stage_clinical_t: d.tumor_stage_clinical_t
        }) AS diagnoses,

        // Survival records
        COLLECT(DISTINCT {
          age_at_last_known_survival_status: sur.age_at_last_known_survival_status,
          first_event: sur.first_event,
          last_known_survival_status: sur.last_known_survival_status
        }) AS survivals,

        // Treatment records
        COLLECT(DISTINCT {
          age_at_treament_end: t.age_at_treatment_end,
          age_at_treatment_start: t.age_at_treatment_start,
          treatment_agent: t.treatment_agent,
          treatment_id: t.treatment_id,
          treatment_type: t.treatment_type
        }) AS treatments;
